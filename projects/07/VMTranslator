#!/usr/local/bin/python3

from parser import Parser, Command
from code_writer import CodeWriter

from glob import glob
import logging
import sys
import os

logging.basicConfig(
    format='%(asctime)s [%(module)s] %(levelname)s:%(message)s',
    level=logging.DEBUG,
    datefmt='%Y-%m-%d %T'
)
LOGGER = logging.getLogger('VMTranslator')
filename = sys.argv[1]


def output_filename(input_filename):
    path = os.path.dirname(input_filename)

    if os.path.isfile(input_filename):
        basename = os.path.basename(input_filename).split('.')[0]
    elif os.path.isdir(input_filename):
        basename = os.path.basename(path)

    return f'{path}/{basename}.asm'


def parse_file(filename, output_filename):
    LOGGER.info(f'Hello I read in file {filename} and I am writing to {output_filename}')
    parser = Parser(filename)
    writer = CodeWriter(output_filename)

    while (parser.has_more_commands()):
        current_command = parser.advance()
        if parser.commandType() == Command.C_PUSH or parser.commandType() == Command.C_POP:
            writer.writePushPop(current_command) # why isn't this arg1, arg2?
        elif parser.commandType() == Command.C_ARITHMETIC:
            writer.writeArithmetic(parser.arg1())
        elif parser.commandType() == Command.C_LABEL:
            writer.writeLabel(parser.arg2())
        elif parser.commandType() == Command.C_IF:
            writer.writeIf(parser.arg2())
        elif parser.commandType() == Command.C_GOTO:
            writer.writeGoto(parser.arg2())
        elif parser.commandType() == Command.C_RETURN:
            writer.writeReturn()
        elif parser.commandType() == Command.C_FUNCTION:
            writer.writeFunction(current_command)


def main():
    if os.path.isfile(filename):
        parse_file(filename, output_filename(filename))
    elif os.path.isdir(filename):
        vm_files = glob(filename + "/*.vm")
        bootstrap = []
        outfile = output_filename(filename)
        LOGGER.info(f'I am reading directory {filename} and writing to {outfile}')


        if "Sys.vm" in map(lambda x: os.path.basename(x), vm_files):
            writer = CodeWriter(outfile)
            writer.writeBootstrap()
            writer.writeCall('call Sys.init 0')


        for f in vm_files:
            parse_file(f, outfile)


if __name__ == '__main__':
    main()
